// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ValveClient is the client API for Valve service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ValveClient interface {
	NotifyBidirectional(ctx context.Context, opts ...grpc.CallOption) (Valve_NotifyBidirectionalClient, error)
}

type valveClient struct {
	cc grpc.ClientConnInterface
}

func NewValveClient(cc grpc.ClientConnInterface) ValveClient {
	return &valveClient{cc}
}

func (c *valveClient) NotifyBidirectional(ctx context.Context, opts ...grpc.CallOption) (Valve_NotifyBidirectionalClient, error) {
	stream, err := c.cc.NewStream(ctx, &Valve_ServiceDesc.Streams[0], "/proto.Valve/NotifyBidirectional", opts...)
	if err != nil {
		return nil, err
	}
	x := &valveNotifyBidirectionalClient{stream}
	return x, nil
}

type Valve_NotifyBidirectionalClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type valveNotifyBidirectionalClient struct {
	grpc.ClientStream
}

func (x *valveNotifyBidirectionalClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *valveNotifyBidirectionalClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ValveServer is the server API for Valve service.
// All implementations must embed UnimplementedValveServer
// for forward compatibility
type ValveServer interface {
	NotifyBidirectional(Valve_NotifyBidirectionalServer) error
	mustEmbedUnimplementedValveServer()
}

// UnimplementedValveServer must be embedded to have forward compatible implementations.
type UnimplementedValveServer struct {
}

func (UnimplementedValveServer) NotifyBidirectional(Valve_NotifyBidirectionalServer) error {
	return status.Errorf(codes.Unimplemented, "method NotifyBidirectional not implemented")
}
func (UnimplementedValveServer) mustEmbedUnimplementedValveServer() {}

// UnsafeValveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValveServer will
// result in compilation errors.
type UnsafeValveServer interface {
	mustEmbedUnimplementedValveServer()
}

func RegisterValveServer(s grpc.ServiceRegistrar, srv ValveServer) {
	s.RegisterService(&Valve_ServiceDesc, srv)
}

func _Valve_NotifyBidirectional_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ValveServer).NotifyBidirectional(&valveNotifyBidirectionalServer{stream})
}

type Valve_NotifyBidirectionalServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type valveNotifyBidirectionalServer struct {
	grpc.ServerStream
}

func (x *valveNotifyBidirectionalServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *valveNotifyBidirectionalServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Valve_ServiceDesc is the grpc.ServiceDesc for Valve service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Valve_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Valve",
	HandlerType: (*ValveServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NotifyBidirectional",
			Handler:       _Valve_NotifyBidirectional_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/wishlist.proto",
}
